defaultTasks 'info'

ext {
	PHP_TAG = getTheTag()
	PHP_CONTAINER_NAME = "pedido-api"
	PHP_IMAGE_NAME_DEV = "${PHP_CONTAINER_NAME}-dev:$PHP_TAG"
	PHP_WWW = "/var/www/html"

	MYSQL_CONTAINER_NAME = "pedido-mysql"
	MYSQL_IMAGE_NAME = "${MYSQL_CONTAINER_NAME}:$PHP_TAG"

}

task 'info' << {
	println """
	tag      : ${project.PHP_TAG}
	container: ${project.PHP_CONTAINER_NAME}
	image    : ${project.PHP_IMAGE_NAME_DEV}
	project  : ${project.PHP_WWW}
	"""
}

/**
 * roda o sistema em modo dev
 * este método já chama o build e up necessário
 */
task 'build-dev' (dependsOn: [
	'build-php', 'build-mysql',
	'docker-mysql-up-dev', 'docker-php-up'
	]) << {

}

/**
 * roda o sistema em modo test (com a base de dados do src)
 * este método já chama o build e up necessário
 */
task 'build-test' (dependsOn: [
	'build-php', 'build-mysql',
	'docker-mysql-up', 'docker-php-up'
	]) << {

}

/**
 * roda o php em modo dev
 * este método já chama o build e up necessário
 */
task 'build-php' (type:Exec) {
	commandLine = ['docker', 'build', '--rm', '--tag',
		"${PHP_IMAGE_NAME_DEV}", '-f', 'docker/php/Dockerfile', '.'
	]
}

/**
 * roda o mysql
 * este método já chama o build e up necessário
 */
task 'build-mysql' (type:Exec) {
	workingDir = 'docker/mysql'
	commandLine = ['docker', 'build', '--rm', '--tag',
		"${MYSQL_IMAGE_NAME}", '.'
	]
}


/**
 * roda o sistema php
 */
task 'docker-php-up' (type:Exec) {
	def pwd = new File(".").absolutePath
	removeContainer(PHP_CONTAINER_NAME)
	commandLine = [
		'docker', 'run', '-d', '--hostname', MYSQL_CONTAINER_NAME,
		'--env', "WWW=${PHP_WWW}",
		'--volume',
			"${pwd}/:${PHP_WWW}",
		'--link', "${MYSQL_CONTAINER_NAME}:${MYSQL_CONTAINER_NAME}",
		'--name', PHP_CONTAINER_NAME, PHP_IMAGE_NAME_DEV
	]
}

/**
 * roda o banco de dados consumindo os 
 * dados que estão salvos no projeto
 */
task 'docker-mysql-up' (type:Exec) {
	doFirst {
		removeContainer(MYSQL_CONTAINER_NAME)
		commandLine = ['docker', 'run', '--expose', '3306',
			'--hostname', MYSQL_CONTAINER_NAME,
			'--name', MYSQL_CONTAINER_NAME,
			'--detach',
			'--env',
				"MYSQL_DATABASE=${MYSQL_CONTAINER_NAME}",
			'--env',
				'MYSQL_ROOT_PASSWORD=root',
			MYSQL_IMAGE_NAME
		]
	}
	doLast {
		println '|||||||||||||||||||||||'
		sleep(15000);
		def buff = new StringBuffer();
		def p = ['docker', 'exec', MYSQL_CONTAINER_NAME, 'sh',
			'/opt/scripts/setup-db'
		].execute()
		p.consumeProcessOutput(buff, buff)
		p.waitForOrKill(10000);
		println buff
		println '<<<<<<<<<<<<<<<'
	}
}

/**
 * roda o banco de dados consumindo os 
 * dados da maquina do desenvolvedor
 */
task 'docker-mysql-up-dev' (type:Exec) {
	removeContainer(MYSQL_CONTAINER_NAME)
	commandLine = ['docker', 'run', '--expose', '3306',
		'--hostname', MYSQL_CONTAINER_NAME,
		'--name', MYSQL_CONTAINER_NAME,
		'--detach',
		'--env',
			"MYSQL_DATABASE=${MYSQL_CONTAINER_NAME}",
			'MYSQL_ROOT_PASSWORD=root',
		'--volume',
			"/var/lib/mageddo/${MYSQL_CONTAINER_NAME}:/var/lib/mysql",
		MYSQL_IMAGE_NAME
	]
}

/**
 * apaga todas as imagens e containers
 * gerados por este projeto
 */
task 'docker-clear' << {
	removeImage(PHP_IMAGE_NAME_DEV)
	removeImage(MYSQL_IMAGE_NAME)
}

def removeLast(String str) {
	str.substring(0, str.length()-1);
}
def getTheTag(){
	removeLast(['git', 'describe', '--abbrev=0', '--tags'].execute().text)
}
def removeContainer(String image){
	def buff = new StringBuffer();
	def proc = ['docker', 'rm', '-f', image].execute();
	proc.consumeProcessOutput(buff, buff)
	proc.waitForOrKill(10000);
	//println buff
}
def removeImage(String image){
	def buff = new StringBuffer();
	def proc = ['docker', 'rmi', '-f', image].execute();
	proc.consumeProcessOutput(buff, buff)
	proc.waitForOrKill(10000);
	//println buff
}